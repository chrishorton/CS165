///
/// Created by Christopher Horton on 5/3/18.


/// This program creates instances of the Rectangle class.
/// The class Rectangle has two parts:
///
///           1. Declaration
///           2. Definition/Implementation
///
/// Q: Which part is declaration? Which part is definition/implementation?
///
///
/// Step 1: Test the program and answer the following questions.
///
/// Q1-1: How many data members does the class Rectangle have?
///
/// Q1-2: How many constructor does the class Rectangle have?
///
/// Q1-3: How many setters does the class Rectangle have?
///
/// Q1-4: How many setters does the class Rectangle have?
///
/// Q1-5: Are the setters and getters public, protected or private? Why?
///
/// Q1-2: How many destructor does the class Rectangle have?
///
///
/// Step 2: Add the following code segment to the end of main().
///
///           Rectangle Rect(6.5, 7.7);
///           cout << "This is the width:  " << Rect.getWidth() << endl;
///           cout << "This is the length: " << Rect.getLength() << endl;
///
/// It intends to create an Rectangle object by providing the width and length.
/// However, the class does not have such constructor. Thus, the program does not
/// compile. Add a proper constructor, which properly initialize the values of width
/// and length, to the class.
///
/// Q2-1: When adding a function to class, we need to modify both the definition and
///       declaration. Is the declaration of the constructor public or private?
///
///       A constructor does not have a return type. More precisely, it does not even
///       have the word "void."
///
/// Q2-2  After adding the constructor to both definition and declaration, we will see
///       that the program still does not compile. The compiler indicates that following
///       line:
///            Rectangle kitchen;
///       is incorrect. The message generated by compiler is
///
///       "error: no matching function for call to 'Rectangle:: Rectangle()'
///
///       This object creation was correct before. Why it is not correct now?

///     Because you are attempting to instantiate Rectangle without values given to the constructor
///
/// Step 3: When creating a Rectangle object, we can easily provide a width which
///       is bigger than its corresponding length. Can we enforce a rule in the constructor
///       so that the incorrect data are not easily entered into the system?
///       Duh
/// Step 4: Create an empty destructor.
///
/// Step 5:
///       Set a break point in each of the constructors and destructor. Run the program
///       and check
///         (1) if a constructor is called BEFORE or AFTER the object is created,
///         (2) if a destructor is called BEFORE or AFTER the object is destroyed,

#include <iostream>
using namespace std;

// Rectangle class declaration.
class Rectangle
{
private:
    double width;
    double length;
public:
    void setWidth(double);
    void setLength(double);
    double getWidth() const;
    double getLength() const;
    double getArea() const;

    Rectangle(double w, double l){

        assert(l>=w && "Width can not be greater than length, please reverse the 2 values.");
        width = w;
        length = l;
    }

    Rectangle(){

    }

    ~Rectangle(){
        cout << "Destructor" << endl;
    }
};


//**************************************************
// setWidth assigns a value to the width member.   *
//**************************************************

void Rectangle::setWidth(double w)
{
    width = w;
}

//**************************************************
// setLength assigns a value to the length member. *
//**************************************************

void Rectangle::setLength(double len)
{
    length = len;
}

//**************************************************
// getWidth returns the value in the width member. *
//**************************************************

double Rectangle::getWidth() const
{
    return width;
}

//****************************************************
// getLength returns the value in the length member. *
//****************************************************

double Rectangle::getLength() const
{
    return length;
}

//*****************************************************
// getArea returns the product of width times length. *
//*****************************************************

double Rectangle::getArea() const
{
    return width * length;
}

//*****************************************************
// Function main                                      *
//*****************************************************

int main()
{
    double number;       // To hold a number
    double totalArea;    // The total area
    Rectangle kitchen;   // To hold kitchen dimensions
    Rectangle bedroom;   // To hold bedroom dimensions
    Rectangle den;       // To hold den dimensions

    // Get the kitchen dimensions.
    cout << "What is the kitchen's length? ";
    cin >> number;                            // Get the length
    kitchen.setLength(number);                // Store in kitchen object
    cout << "What is the kitchen's width? ";
    cin >> number;                            // Get the width
    kitchen.setWidth(number);                 // Store in kitchen object

    // Get the bedroom dimensions.
    cout << "What is the bedroom's length? ";
    cin >> number;                            // Get the length
    bedroom.setLength(number);                // Store in bedroom object
    cout << "What is the bedroom's width? ";
    cin >> number;                            // Get the width
    bedroom.setWidth(number);                 // Store in bedroom object

    // Get the den dimensions.
    cout << "What is the den's length? ";
    cin >> number;                            // Get the length
    den.setLength(number);                    // Store in den object
    cout << "What is the den's width? ";
    cin >> number;                            // Get the width
    den.setWidth(number);                     // Store in den object

    // Calculate the total area of the three rooms.
    totalArea = kitchen.getArea() + bedroom.getArea()
                + den.getArea();

    // Display the total area of the three rooms.
    cout << "The total area of the three rooms is "
         << totalArea << endl;

    Rectangle Rect(6.5, 7.7);
    cout << "This is the width:  " << Rect.getWidth() << endl;
    cout << "This is the length: " << Rect.getLength() << endl;

    return 0;
}